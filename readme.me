crear tabla en django
py manage.py makemigrations
py manage.py migrate

#Administrador de django
#creamos usuario y contraseña para el administrador de django
ejecutamos en el terminal el siguiente comando:
py manage.py createsuperuser
user: admin
pass: 123

ListView Funciona para ver los datos
CreateView Sirve para registrar datos sin utilizar el administrador django

025 Blog-sobre-Tipos-de-Campos
https://neunapp.com/programacion-web-con-django/tipos-de-campos-de-un-modelo-en-django-fields-in-models-33026/


EJECUTAMOS  SQLSHELL 
Server [localhost]: DEJAR VACIO 
Database [postgres]:DEJAR VACIO 
Port [5432]: DEJAR VACIO 
Username [postgres]: DEJAR VACIO 
Password for user postgres: 123
psql (15.1)
WARNING: Console code page (850) differs from Windows code page (1252)
         8-bit characters might not work correctly. See psql reference
         page "Notes for Windows users" for details.
Type "help" for help.

postgres=# CREATE DATABASE dbempleado;
CREATE DATABASE
postgres=# CREATE USER neunapp;
CREATE ROLE
postgres=# \C dbempleado;
Title is "dbempleado".
postgres=# \c dbempleado;
You are now connected to database "dbempleado" as user "postgres".
dbempleado=# ALTER ROLE neunapp WITH PASSWORD '123'
dbempleado-# ;
ALTER ROLE
dbempleado=#


ahora debemos instalar 
pip install psycopg2 

esto para que el codigo python se transforme en codigo sql de postgress

ejecutar las migraciones 
 py manage.py migrate

 SALTARA UN ERROR Y SE SOLUCIONA CON IR A SQLSHELL

 Server [localhost]:
Database [postgres]:
Port [5432]:
Username [postgres]:
Password for user postgres:
psql (15.1)
WARNING: Console code page (850) differs from Windows code page (1252)
         8-bit characters might not work correctly. See psql reference
         page "Notes for Windows users" for details.
Type "help" for help.

postgres=# \c dbempleado;
You are now connected to database "dbempleado" as user "postgres".
dbempleado=# GRANT postgres TO neunapp;

ahora no podemos acceder a 127.0.0.1/admin por que al cambiamos de gestor de base de datos

entonces debemos ejecutar
py manage.py createsuperuser
y crear el super usuario

Administrador de django sirve la nueva tendencia de desarrollar
Backend, que es tener piezas de CRUD  mas sencillas y rapidas de implementar.entonces la tendencia es en desarrollo agil y corto tiempo

Luego de crear class Habilidades en los models ejecutamos 
makemigrations y luego migrate 
 
 Luego vinculamos a habilidades con Empleado con una relacion de muchos a muchos

 models.ManyToManyField(Habilidades)

Otra vez  ejecutamos 
makemigrations y luego migrate  por alterar los modelos y ejecute el codigo sql 


Vistas Basadas en clases 
Ya los habiamos trabajado pero de una manera muy general
ListView

ListView
para acceder a una lista en un html de un listview sin context_object_name='lista' 
en el html pomenos {{object_list}}

Que pasa si quisiera cargar de bloque en bloque llamado la paginacion 
La paginacion se realiza para optimizar la consulta hacia nuestro servidor 
y que no sean tan pesados los resultados que envien hacia el servidor
para paginar (como en google los resultados de la busqueda) hacemos lo dicho en el codigo 

podemos encontrar mas informacion aqui:
https://docs.djangoproject.com/en/4.1/ref/class-based-views/generic-display/

DetailView
Me ayuda a ver un registro especifico de una tabla de una base de datos

https://docs.djangoproject.com/en/4.1/ref/class-based-views/generic-display/

Get_context_data= sirve para  


PAra este capitulo la vista Generara el Full Name apartir de que ya hayamos digitido en nuestras cajas vacias en el html
Una vez editado el Empleado.models agregando el campo full name hacemos las migraciones en la terminal
Resulta que el form en el html se ve afectado por este nuevo campo por que a;adimos un nuevo campo 

Esta seria la forma de intersecta correctamente un registro para añadir mas campos, aunque esta no sea las mejor forma de guardar un form pero necesario en algunos casos

Documentacion CreateView para ver mas de sus metodos
https://docs.djangoproject.com/en/4.1/ref/class-based-views/generic-editing/#createview

Para realizar un proceso de mas que se necesite en UpdateView o en Create podemos utilizar cualquiera de los dos metodos mencionados, la diferiencia esta en como hacen el proceso

Algunos metodos de deleteview
https://ccbv.co.uk/projects/Django/4.1/django.views.generic.edit/DeleteView/

Reto de analizar def delete(self, request, *args, **kwargs):
Sin conclusion por que no imprime

# Para editar  un formulario con debemos crear un archivo form.py dentro de su respectiva app

declara los metodos a validar del form
los llama en la vista
si ocurre un error previsto indica un mensaje
en este caso si digito algo menor a 10 saltara un error

Lo interesante es que no guarda nada en la db si no pasa la validacion del form

Ahora para aadir los atributos de un html en los formularios hacemos lo siguiente

Nos piden un nuevo requerimiento que podremos apreciar en la carpeta de archivos
y consta de registrar un departamento y al menos debe haber un empleado en ese departamento por lo tanto se necesita al mismo tiempo registrar un empleado a cargo 


Cargar css en html- tutorial 
Creamos una carpeta llamada static en la riz de nuestro proyecto

luego, hay que configurar   empleado.settings.local.py 
dejamos estas variables de esta manera
STATIC_URL = '/static/'
STATICFILES_DIRS =[BASE_DIR.child('STATIC')]
con esto septiamos  nuestra carpeta de archivos estaticos

creamos nuestro archivo html en templates (Yo aqui ya lo tenia creado)
Nuestro css en la carpeta ./static/ llamado styles.css
vamos a nuestro archivo html y lo escribimos EL CODIGO HTML a nuestra manera

entonces hay que decirle al template html que cargue nuestros archivos estaticos 

en la primera linea del archivo html escribimos 
{% load staticfiles  %}
{% load static %} 

y en la linea del html link rel="stylesheet" le colocamos en href
<link rel="stylesheet" href="{% static 'prueba.css' %}">
con esto accede a los archivos staticos y busca 'prueba.css' 

Recordar que los archivos binarios, css, y js son archivos estaticos, no cambian.

en el archivo css escribimos nuestro codigo css

En la clase siguiente para cargar los archivos estáticos se utiliza el siguiente código en la cabecera del archivo html:

{% load staticfiles %}

Ahora en la nueva versión de Django se debe utilizar:

{% load static %}



Se darán cuenta por que al intentar cargar un pantalla saltara un error similar a este:

staticfiles' is not a registered tag library. Must be one of:

admin_list

admin_modify

admin_urls

cache

i18n

l10n

log

static

tz

elegimos foundation zurb por que es excelente trabajando con STATICFILES_DIRS
Lo obtenemos de 
https://get.foundation/
Agregamos su css y js a ./static/ 
y editamos el html y llamamos a foundation.css
<link rel="stylesheet" href="{% static 'css/foundation.css' %}">

Probamos los un codigo de botones obtenido de la siguiente url 
https://get.foundation/sites/docs/button.html para ver si carga nuestro foundation.css


Dembemos cumplir el requerimiento pedido
Utilizamos 
https://get.foundation/sites/docs/callout.html

Es Necesario escribir el codigo que esta en list_all.html dentro de un block por que si django no lo toma en cuenta por temas de herencia

Para este caso usar web devoloper y ver los modelos cajas de cada uno de los elementos del html 

#ahora queremos que el boton de buscaar nos de la opcion de ver todos los detalles del elemento digitado

para eso seleccionamos el def get_queryset(self): de la vista ListEmployeeByKword en personas y lo pegamos en la vista que estamos trabajando
el id y el name  de la caja de texto en el html debe ser igual a que pondremos en  self.request.GET.get('kword','') en la funcion def get_queryset(self):

para poder realizar todo esto debe esta dentro de un formulario

Al cargar la vista no muestra ninguna lista 